/**
 * 日付処理に関するユーティリティ関数集
 * 
 * 【このファイルの目的】
 * - 日付・時刻の表示を統一的にフォーマット（整形）する
 * - 国際化対応（日本語ロケールでの表示）
 * - アプリケーション全体で一貫した日付表示を実現
 * 
 * 【日付フォーマットとは？】
 * データベースやAPI から受け取った日付データ（通常は文字列や特定の形式）を
 * ユーザーにとって読みやすい形に変換すること
 * 例：「2024-01-15T14:30:00Z」→「2024/1/15 14:30:00」
 */

// 定数ファイルからUI設定を読み込み
// 【importの説明】
// '../constants' = 一階層上のconstantsディレクトリから設定値を取得
// UI.DATE_LOCALE = 'ja-JP'（日本語ロケール設定）が格納されている
import { UI } from '../constants';

/**
 * 日付を日本語ロケールでフォーマットする関数
 * 
 * 【この関数の役割】
 * - ISO形式の日付文字列を日本語環境に適した形式に変換
 * - アプリケーション全体で統一された日付表示を提供
 * - ブラウザの標準機能を活用した確実な日付変換
 * 
 * 【引数の説明】
 * @param dateString - 変換対象の日付文字列
 *                    通常はAPIから取得したISO形式の日付
 *                    例：'2024-01-15T14:30:00.000Z'、'2024-01-15T05:30:00+00:00'
 * 
 * 【戻り値】
 * @returns string - 日本語ロケールでフォーマットされた日付文字列
 *                  例：'2024/1/15 14:30:00'
 * 
 * 【処理の詳細解説】
 * 1. new Date(dateString)：
 *    - JavaScript標準のDateオブジェクトを作成
 *    - 文字列形式の日付を内部的な日付オブジェクトに変換
 *    - 【例】'2024-01-15T14:30:00Z' → Dateオブジェクト
 * 
 * 2. .toLocaleString(UI.DATE_LOCALE)：
 *    - Dateオブジェクトを指定されたロケール（地域設定）に従って文字列化
 *    - UI.DATE_LOCALE = 'ja-JP'なので、日本語形式で変換される
 *    - 【変換例】
 *      入力：'2024-01-15T14:30:00Z'
 *      出力：'2024/1/15 14:30:00'
 * 
 * 【使用場面】
 * - スレッドの作成日時表示：「作成日時: 2024/1/15 14:30:00」
 * - 投稿の投稿日時表示：「投稿日時: 2024/1/16 09:15:30」
 * - その他、ユーザーに日付を表示する全ての箇所
 */
export const formatDate = (dateString: string): string => {
  // new Date()でDateオブジェクトを作成し、toLocaleString()で日本語形式に変換
  return new Date(dateString).toLocaleString(UI.DATE_LOCALE);
}; 